x / y
x%*%y
x <- matrix(c(1,2,3,4), nrow=2)
y <- matrix(c(2,2), nrow=2)
x; y
x %*% y
a <- c(1,2,3,4)
class(a)
b <- as.integer(a)
class(b)
mean(b)
std(b)
sd(b)
sd(a)
mean(a)
c <- as.factor(a)
class(c)
c %in% c("numeric","integer")
a %in% c("numeric","integer")
class(c) %in% c("numeric","integer")
class(a) %in% c("numeric","integer")
normaliza <- function(vector) {
# Primero, chequea vector
if (class(vector) %in% c("numeric","integer")) {
print("Ok")
} else {print("Vector input debe ser numerico")}
}
normaliza(c("hola","icesi"))
normaliza(c(1,2,3))
normaliza <- function(vector) {
# Primero, chequea vector
if (class(vector) %in% c("numeric","integer")) {
print("Normalizando vector")
# calcula media y st dev.
mu <- mean(vector, na.rm=T)
std <- sd(vector, na.rm=T)
# normaliza vector
(vector-mu)/std
} else {print("Vector input debe ser numerico")}
}
normaliza(c("hola","icesi"))
normaliza(c(1,2,3))
1-2.5
mean(c(1,2,3))
sd(c(1,2,3))
normaliza(c(1,2,3,4))
normaliza <- function(vector) {
# Primero, chequea vector
if (class(vector) %in% c("numeric","integer")) {
print("Normalizando vector")
# calcula media y st dev.
mu <- mean(vector, na.rm=T)
std <- sd(vector, na.rm=T)
# normaliza vector
return (vector-mu)/std
} else {print("Vector input debe ser numérico")}
}
normaliza(c(1,2,3))
normaliza(c(1,2,3,"1"))
normaliza(c(1,2,3,NA))
normaliza(c(1,2,3,NA,3,2,10,400,2,3,4,2,6))
test<-normaliza(c(1,2,3,NA,3,2,10,400,2,3,4,2,6))
mean(test,na.rm=T)
sd(test,na.rm=T)
normaliza(runif(5,1,10))
normaliza(c(1,2,3,4,5))
normaliza(c("1","2","3"))
test<-normaliza(c("1","2","3"))
test
normaliza <- function(vector) {
# Primero, chequea vector
if (class(vector) %in% c("numeric","integer")) {
print("Normalizando vector")
# calcula media y st dev.
mu <- mean(vector, na.rm=T)
std <- sd(vector, na.rm=T)
# normaliza vector
return (vector-mu)/std
} else {stop("Vector input debe ser numérico")}
}
normaliza(c("1","2","3"))
test<-normaliza(c("1","2","3"))
test
rm(test)
test<-normaliza(c("1","2","3"))
test
normaliza(c("1","2","3"))
?scale
?normalize
?normal
vector <- c(1,2,3,4,5)
vector
normaliza(vector)
scale(vector)
sd(vector)
mean(scale(vector))
sd(scale(vector))
mean(normaliza(vector))
sd(normaliza(vector))
sd(vector)
mu <- mean(vector)
mu
std <- sd(vector)
std
vector-mu
vector-mu/std
(vector-mu)/std
mean((vector-mu)/std)
sd((vector-mu)/std)
normaliza <- function(vector) {
# Primero, chequea vector
if (class(vector) %in% c("numeric","integer")) {
print("Normalizando vector")
# calcula media y st dev.
mu <- mean(vector, na.rm=T)
std <- sd(vector, na.rm=T)
# normaliza vector
return((vector-mu)/std)
} else {stop("Vector input debe ser numérico")}
}
sd(normaliza(vector))
mean(normaliza(vector))
vector <- rnorm(10000,50,10)
hist(vector,breaks=50)
mean(normaliza(vector))
mean(normaliza(vector)); sd(normaliza(vector))
par(mfrow=c(2,1), mar=c(4,4,2,1))
hist(vector,breaks=50,col="gray")
hist(normaliza(vector),breaks=50,col="lightblue")
grafica.dist <- function(n,mean=1,std=0,...) {
vector <- rnorm(n,mean,std)
hist(vector,breaks=50)
}
grafica.dist(1000)
par(mfrow=c(1,1))
grafica.dist(1000)
?rnorm
grafica.dist <- function(n,media=1,std=0,...) {
vector <- rnorm(n,media,std)
hist(vector,breaks=50)
}
grafica.dist(1000)
vector <- rnorm(1000,1,0)
hist(vector,breaks=50)
head(vector)
mean(vector)
grafica.dist <- function(n,media=0,std=1,...) {
vector <- rnorm(n,media,std)
hist(vector,breaks=50)
}
grafica.dist(1000)
grafica.dist(10000)
grafica.dist(10000,main="titulo")
grafica.dist <- function(n,media=0,std=1,...) {
vector <- rnorm(n,media,std)
hist(vector,breaks=50,...)
}
grafica.dist(10000,main="titulo")
grafica.dist(10000,media=15,std=5,
main="Distribución normal\nMedia = 15, St. Dev. = 5",
xlab="")
grafica.dist(10000,media=15,std=5,
main="Distribución normal\nMedia = 15, St. Dev. = 5",
xlab="",color="lightgreen")
grafica.dist(10000,media=15,std=5,
main="Distribución normal\nMedia = 15, St. Dev. = 5",
xlab="",col="lightgreen")
grafica.dist(10000,media=15,std=15)
grafica.dist(10000,media=15,std=45)
grafica.dist(10000,media=15,std=45,breaks=100)
grafica.dist(10000,media=15,std=45)
grafica.dist(10000,media=5,std=45)
library(ggplot2)
data(mtcars)
head(mtcars)
data(airquality)
head(airquality)
url <- "http://www.datos.gov.co/frm/catalogo/frmDescargaArchivo.aspx?FILENAME=Alcaldia_de_Hato_Corozal.accidentetransito.csv"
download.file(url, destfile="accidentes.csv", method="curl")
accidentes <- read.csv("accidentes.csv", header=TRUE, na.strings="")
head(accidentes)
head(accidentes[,c(1,3,4,5,6)])
levels(accidentes$tipo_accidente)
pander(table(accidentes$tipo_accidente)
)
library(pander)
pander(table(accidentes$tipo_accidente))
library(dplyr)
tbl <- summarize(group_by(accidentes,tipo_accidente),Numero=n())
tbl
pander(tbl)
?reorder
tbl$Porcentaje
tbl <- mutate(tbl, Freq.Rel=Freq.Clase/dim(accidentes)[1])
tbl <- summarize(group_by(accidentes,tipo_accidente),Freq.Clase=n())
tbl <- mutate(tbl, Freq.Rel=Freq.Clase/dim(accidentes)[1])
tbl <- mutate(tbl, Porcentaje=Freq.Rel*100)
tbl$Porcentaje
reorder(tbl$Porcentaje)
reorder(tbl$Porcentaje, tbl$Porcentaje)
str(tbl)
p <- ggplot(mtcars, aes(x=mpg))
p + geom_histogram()
p + geom_histogram(binwidth=20)
p + geom_histogram(binwidth=2)
p + geom_histogram(binwidth=1)
p + geom_histogram(binwidth=2)
p <- ggplot(mtcars, aes(x=mpg))
p + geom_histogram(binwidth=2) +
labs(title="Histograma MPG. Datos Carros") +
labs(y="Count", x="MPG") +
theme_bw(base_family="Times", base_size=12)
head(mtcars)
dim(mtcars)
dim(mpg)
head(mpg)
data(mpg) # de la libreria ggplot2
p <- ggplot(mpg, aes(x=hwy))
p + geom_histogram(binwidth=20) +
labs(title="Histograma MPG. Datos Carros") +
labs(y="Count", x="MPG") +
theme_bw(base_family="Times", base_size=12)
p + geom_histogram(binwidth=2) +
labs(title="Histograma MPG. Datos Carros") +
labs(y="Count", x="MPG") +
theme_bw(base_family="Times", base_size=12)
p + geom_histogram(binwidth=1) +
labs(title="Histograma MPG. Datos Carros") +
labs(y="Count", x="MPG") +
theme_bw(base_family="Times", base_size=12)
levels(mpg$trans)
levels(mpg$drv)
p <- ggplot(mpg, aes(x=hwy))
p + geom_histogram(binwidth=1, aes(fill=drv)) +
labs(title="Histograma MPG. Datos Vehículos") +
labs(y="Count", x="MPG") +
theme_bw(base_family="Times", base_size=12)
synt <- data.frame(x=rnorm(10000,10,3))
p <- ggplot(synt, aes(x=x))
p + geom_histogram() +
theme_bw(base_family="Times", base_size=12)
x <- data.frame(x=c(10, 10, 25, 35, 125, 125))
ggplot(x, aes(x=x)) + geom_histogram(binwidth=2) +
theme_bw(base_family="Times", base_size=12)
x <- data.frame(x=c(10, 10, 25, 35, 125, 125))
ggplot(x, aes(x=x)) + geom_histogram(binwidth=3) +
theme_bw(base_family="Times", base_size=12)
ggplot(x, aes(x=x)) + geom_histogram(binwidth=10) +
theme_bw(base_family="Times", base_size=12)
ggplot(x, aes(x=x)) + geom_histogram(binwidth=5) +
theme_bw(base_family="Times", base_size=12)
summary(x)
par(mfrow=c(1,2))
hist(mpg$hwy[mpg$drv=="f"], col="lightgray", main="Histograma Consumo -tracción delantera-")
hist(mpg$hwy[mpg$drv=="r"], col="lightgray", main="Histograma Consumo -tracción trasera-")
par(mfrow=c(1,2))
hist(mpg$hwy[mpg$drv=="f"], col="lightgray", main="Histograma Consumo\nTracción delantera")
hist(mpg$hwy[mpg$drv=="r"], col="lightgray", main="Histograma Consumo\nTracción trasera-")
par(mfrow=c(1,2))
hist(mpg$hwy[mpg$drv=="f"], col="lightgray", main="Histograma Consumo\nTracción delantera", xlab="MPG")
hist(mpg$hwy[mpg$drv=="r"], col="lightgray", main="Histograma Consumo\nTracción trasera", xlab="MPG")
pander(summary(x))
pander(summary(mpg$hwy[mpg$drv=="f"])); pander(summary(mpg$hwy[mpg$drv=="r"]))
res <- summary(x)
res[2:3]
res[1:3]
res[3:5]
res[3:4]
x <- c(rep(-10,15),rep(0,20),rep(10,30),rep(20,20),rep(30,15))
head(x)
y <- c(rep(-10,5),rep(0,15),rep(10,60),rep(20,15),rep(30,5))
profit <- data.frame(x=x,y=y)
par(mfrow=c(1,2))
hist(profit$x, col="lightgray", main="Histograma Escenario 1", xlab="Utilidad")
hist(profit$y, col="lightgray", main="Histograma Escenario 2", xlab="Utilidad")
range(profi$x)
range(profit$x)
range(profit$y)
mean(profit$x)
mean(profit$y)
sd(profit$x)
sd(profit$y)
median(profit$x)
median(profit$y)
p <- ggplot(mpg, aes(drv, hwy))
p + geom_boxplot() +
labs(title="Histograma Consumo. Datos Vehículos") +
labs(y="MPG", x="Tracción") +
theme_bw(base_family="Times", base_size=12)
pnorm(3,mean=2,sd=1.5,lower.tail=F)
pnorm(1.28,0,1,lower.tail=F)
pnorm(1.64,0,1,lower.tail=F)
pnorm(1.96,0,1,lower.tail=F)
n <- 2500
means <- cumsum(rnornm(n,5,1))/(1:n)
means <- cumsum(rnorm(n,5,1))/(1:n)
plot(means, main="Cumulative Mean")
?Plot
?plot
plot(means, type="l", main="Cumulative Mean")
abline(h=5,col="blue")
means <- cumsum(sample(0:1, n, replace=T))/(1:n)
plot(means, type="l", main="Cumulative Mean")
abline(h=0.5,col="blue")
qnorm(0.975)
0.56 + c(-1,1) * qnorm(0.975) * sqrt(0.56*0.44/100)
binom.test(56,100)$conf.int
qnorm(0.95,1100,75)
pnorm(70,80,10,lower.tail=TRUE)
1-pnorm(70,80,10,lower.tail=FALSE)
?runif
ppois(10, lambda=5*3)
choose(5, 4) * 0.5^5 + choose(5, 5) * 0.5^5
qnorm(0.95,1100,75/sqrt(100))
pnorm(16,15,10/sqrt(100),lower.tail=F)
up<-pnorm(16,15,10/sqrt(100),lower.tail=F)
low<-pnorm(16,15,10/sqrt(100),lower.tail=T)
low<-pnorm(14,15,10/sqrt(100),lower.tail=T)
1-(up+low)
?prnorm
?pnorm
pnorm(10, mean = 80, sd = 10, lower.tail = TRUE)
pnorm(70, mean = 80, sd = 10, lower.tail = TRUE)
pnorm(70, mean = 80, sd = 10, lower.tail = FALSE)
qnorm(0.975)
qnorm(0.95)
80 + c(-1,1) * qnorm(0.975) * 10/sqrt(100)
?norm.test
?binom.test
?normal.test
data(sleep)
head(sleep)
sleep
g1 <- sleep$extra[1:10]; g2 <- sleep$extra[11:20]
difference <- g2 - g1
mn <- mean(difference); s <- sd(difference); n <- 10
mn + c(-1,1) * qt(0.975, n-1) * s / sqrt(n)
t.test(difference)
t.test(g2,g1, paired=TRUE)
t.test(extra ~ I(relevel(group,2)), paired=TRUE, data=sleep)
n1 <- length(g1); n2 <- length(g2)
sp <- sqrt( ((n1-1)*sd(g1)^2+(n2-1)*sd(g2)^2)/(n1+n2-2) ) #pooled std
md <- mean(g2) - mean(g1)
semd <- sp * sqrt(1/n1 + 1/n2)
rbind(
md + c(-1,1) * qt(0.975, n1+n2-2) * semd,
t.test(g2,g1, paired=F, var.equal=T)$conf,
t.test(g2,g1, paired=T)$conf
)
wideCW14 <- subset(wideCW, Diet %in% c(1,4))
rbind(
library(datasets); data(ChickWeight); library(reshape2)
library(datasets); data(ChickWeight); library(reshape2)
wideCW <- dcast(ChickWeight, Diet + Chick ~ Time, value.var = "weight")
names(wiedeCW)[-(1:2)] <- paste("time", names(wideCW)[-(1:2)], sep=" ")
library(dplyr)
names(wideCW)[-(1:2)] <- paste("time", names(wideCW)[-(1:2)], sep=" ")
wideCW <- mutate(wideCW,
gain = time21 - time0)
View(wideCW)
View(ChickWeight)
wideCW <- dcast(ChickWeight, Diet + Chick ~ Time, value.var = "weight")
names(wideCW)[-(1:2)] <- paste("time", names(wideCW)[-(1:2)], sep="")
wideCW <- mutate(wideCW,
gain = time21 - time0)
wideCW14 <- subset(wideCW, Diet %in% c(1,4))
rbind(
t.test(gain ~ Diet, paired=FALSE, var.equal=T, data=wideCW14)$conf,
t.test(gain ~ Diet, paired=FALSE, var.equal=F, data=wideCW14)$conf
)
hist(runif(1000))
mns <- NULL
for (i in 1:1000) mns <- c(mns, mean(runif(40)))
hist(mns)
n <- 1000
lambda <- 0.2
sim <- rexp(n, lambda)
hist(sim)
mns <- NULL
for (i in 1:1000) mns <- c(mns, mean(rexp(40,lambda)))
hist(mns)
sample.mean <- mean(mns)
thep.mean <- 1/lambda
sample.std <- sd(mns)
sample.std^2
sim <- rexp(n, lambda)
mean(sim)
sd(sim)
n <- 40
lambda <- 0.2
# Simulate 1000 means from 40 exponentials
mns <- NULL
for (i in 1:1000) mns <- c(mns, mean(rexp(n,lambda)))
hist(mns)
library(ggplot2)
ggplot(mns,aes(x=mns))+geom_histogram()
df <- data.frame(mns=mns)
ggplot(df,aes(x=mns))+geom_histogram()
ggplot(df,aes(x=mns))+geom_histogram(fill="grey")
ggplot(df,aes(x=mns))+geom_histogram(fill="blue")
ggplot(df,aes(x=mns))+geom_histogram(fill="lightblue")
ggplot(df,aes(x=mns))+geom_histogram(fill="black")
ggplot(df,aes(x=mns)) + geom_histogram(fill="black") +
geom_vline(xintercept = sample.mean, colour="blue", size=2)
ggplot(df,aes(x=mns)) + geom_histogram(fill="black") +
geom_vline(xintercept = sample.mean, colour="blue", size=2) +
labs(title="Histogram of Simulated Exponential Means")
sd(mns)
1/lambda
var(msn)
var(mns)
sqrt(var(mns))
var(mns)/1000
sqrt(var(mns)/1000)
round(var(mns),2)
(1/lambda)^2
25/1000
25/40
par(mfrow=c(1,2))
hist(sim, col="grey", main="1000 exponentials")
hist(mns, col="grey", main="1000 averages of 40 exponentials")
summary(mns)
iqr <- 5.545-4.428
iqr/sd(mns)
library(datasets)
data(ToothGrowth)
str(ToothGrowth)
summary(ToothGrowth)
library(ggplot2)
?ToothGrowth
ggplot(ToothGrowth, aes(x=len)) + geom_histogram() +
labs(title="Histogram of Tooth Length")
ggplot(ToothGrowth, aes(x=len)) + geom_histogram() +
facet_grid(.~supp)
labs(title="Histogram of Tooth Length")
ggplot(ToothGrowth, aes(x=len)) + geom_histogram() +
facet_grid(dose~supp)
labs(title="Histogram of Tooth Length")
ggplot(ToothGrowth, aes(x=len)) + geom_histogram() +
facet_grid(dose~supp) +
labs(title="Histogram of Tooth Length by Supplement Type and Dose")
summary(ToothGrowth)
mu <- mean(ToothGrowth$len[ToothGrowth$dose==0.5],na.rm=T)
s <- sd(ToothGrowth$len[ToothGrowth$dose==0.5],na.rm=T)
n <- dim(ToothGrowth$len[ToothGrowth$dose==0.5])
n <- length(ToothGrowth$len[ToothGrowth$dose==0.5])
n
n-1
mu + c(-1,1) * qt(0.975, n-1) * s / sqrt(n)
n <- length(ToothGrowth$len[ToothGrowth$dose==1])
mu <- mean(ToothGrowth$len[ToothGrowth$dose==1],na.rm=T)
s <- sd(ToothGrowth$len[ToothGrowth$dose==1],na.rm=T)
n <- length(ToothGrowth$len[ToothGrowth$dose==1])
mu + c(-1,1) * qt(0.975, n-1) * s / sqrt(n)
mu <- mean(ToothGrowth$len[ToothGrowth$dose==2],na.rm=T)
s <- sd(ToothGrowth$len[ToothGrowth$dose==2],na.rm=T)
n <- length(ToothGrowth$len[ToothGrowth$dose==2])
mu + c(-1,1) * qt(0.975, n-1) * s / sqrt(n)
summary(ToothGrowth$len)
25.28-13.08
sd(ToothGrowth$len)
12.2/7.6
sd(ToothGrowth$len[ToothGrowth$supp="OJ"])
sd(ToothGrowth$len[ToothGrowth$supp=="OJ"])
sd(ToothGrowth$len[ToothGrowth$supp=="VC"])
t.test(len~supp, paired=FALSE,var.equal=F,data=ToothGrowth)
t.test(len~supp, paired=FALSE,var.equal=T,data=ToothGrowth)
head(ToothGrowth)
t.test(len~supp, paired=T,data=ToothGrowth)
t.test(len~supp, paired=FALSE,var.equal=F,data=ToothGrowth)
qnorm(0.975)
qnorm(0.95)
(44-42)/(5/sqrt(35))
setwd("/Users/carlospatino/Google Drive/Repo_METODOS/MetodosCuantitativosInnovacionSocial")
getwd()
jefes <- read.csv("persegco_jefes.csv",sep=";")
View(jefes)
str(jefes)
summary(jefes)
summary(jefes)
jefes_caracteristica <- jefes[,c("P220","P5785","P1366","P6210","P1365")]
summary(jefes_caracteristica)
table(jefes_caracteristica$P1365)
?bar
?barplot
?bar
?barplot
barplot(table(jefes_caracteristica$P1365))
library(ggplot2)
ggplot(jefes_caracteristica,aes(x=P1365)) + geom_bar()
ggplot(jefes_caracteristica,aes(x=P1365)) + geom_bar(colour="blue")
ggplot(jefes_caracteristica,aes(x=P1365)) + geom_bar(fill="blue")
ggplot(jefes_caracteristica,aes(x=P1365)) + geom_bar(aes(fill=P220))
ggplot(jefes_caracteristica,aes(x=P1365)) + geom_bar(aes(fill=P220)) + labs(title="Situacion y Genero")
ggplot(jefes_caracteristica,aes(x=P1365)) + geom_bar(aes(fill=P220)) + labs(title="Situación y Género")
ggplot(jefes,aes(x=P1359)) + geom_bar(aes(fill=P220)) + labs(title="Situación y Género")
ggplot(jefes,aes(x=DEPMUNI)) + geom_bar(aes(fill=P1359)) + labs(title="Situación y Género")
ggplot(jefes,aes(x=municipio)) + geom_bar(aes(fill=P1359)) + labs(title="Situación y Género")
ggplot(jefes,aes(x=Municipio)) + geom_bar(aes(fill=P1359)) + labs(title="Situación y Género")
ggplot(jefes,aes(x=Municipio)) + geom_bar(aes(fill=P1359)) + labs(title="Situación y Género") + theme(axis.text.x = element_text(angle = 90, hjust = 1))
ggplot(jefes,aes(x=Municipio)) + geom_bar(aes(fill=P1359)) + labs(title="Inseguridad según Municipio") + theme(axis.text.x = element_text(angle = 90, hjust = 1))
ggplot(jefes,aes(x=Municipio)) + geom_bar(aes(fill=P1359)) + labs(title="Inseguridad según Municipio") + facet.grid(.~P220) + theme(axis.text.x = element_text(angle = 90, hjust = 1))
ggplot(jefes,aes(x=Municipio)) + geom_bar(aes(fill=P1359)) + labs(title="Inseguridad según Municipio") + facet_grid(.~P220) + theme(axis.text.x = element_text(angle = 90, hjust = 1))
ggplot(jefes,aes(x=Municipio)) + geom_bar(aes(fill=P1359)) + labs(title="Inseguridad según Municipio") + theme(axis.text.x = element_text(angle = 90, hjust = 1))
ggplot(jefes,aes(x=Municipio)) + geom_bar(aes(fill=P1359)) + labs(title="Inseguridad según Municipio") + facet_grid(.~P220) + theme(axis.text.x = element_text(angle = 90, hjust = 1))
summary(jefes$P5785)
sd(jefes$P5785)
48 + 1.96*(15.62/sqrt(67928))
48 - 1.96*(15.62/sqrt(67928))
48 - c(1,-1) * 1.96*(15.62/sqrt(67928))
48 - c(-1,1) * 1.96*(15.62/sqrt(67928))
prop.test(table(jefes$P220,jefes$P1359))
